buildscript {
  repositories {
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.3.RELEASE")
    classpath('au.com.dius:pact-jvm-provider-gradle_2.11:3.3.4')
  }
}


group 'de.dranke.learning'
version '0.1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'au.com.dius.pact'

jar {
  baseName = 'pact-demo-server'
  version = '0.1.0'
}

task('execJar', type: Jar, dependsOn: 'jar') {
  baseName = 'service'
  version = '1.0'
  classifier = 'exec'
  from sourceSets.main.output
  manifest {
    attributes 'Implementation-Version': project.version
  }
}

// https://github.com/DiUS/pact-jvm/tree/master/pact-jvm-provider-gradle

repositories {
  mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
  // tag::jetty[]
  compile("org.springframework.boot:spring-boot-starter-web") {
    exclude module: "spring-boot-starter-tomcat"
  }
  compile("org.springframework.boot:spring-boot-starter-jetty")
  // end::jetty[]
  // tag::actuator[]
  compile("org.springframework.boot:spring-boot-starter-actuator")
  // end::actuator[]

  testCompile("junit:junit")
}

pact {
  serviceProviders {

    // You can define as many as you need, but each must have a unique name
    personProvider {

//      startProviderTask = execJar
//      terminateProviderTask = killTheApp

      // All the provider properties are optional, and have sensible defaults (shown below)
      protocol = 'http'
      host = 'localhost'
      port = 8080
      path = '/'

      // Again, you can define as many consumers for each provider as you need, but each must have a unique name
//            hasPactWith('consumer1') {
//
//                // currently supports a file path using file() or a URL using url()
//                pactFile = file('path/to/provider1-consumer1-pact.json')
//
//            }

      // Or if you have many pact files in a directory
      hasPactsWith('manyConsumers') {

        // Will define a consumer for each pact file in the directory.
        // Consumer name is read from contents of pact file
        pactFileLocation = file('pacts')
      }
    }
  }
}
